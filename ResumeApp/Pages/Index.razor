@page "/"
@using ResumeApp.Components.Resume
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject ILogger<Index> Logger

@if (ResumeData == null)
{
    <PageTitle>@_website.index_resumeLoadingPageTitle</PageTitle>
    <a class="loader little-padding" role="status">
        <span class="tiny no-opacity">@_website.index_resumeLoadingText</span>
    </a>
}
else
{
    <PageTitle>@_website.index_resumeOf@ResumeData.Basics.Name</PageTitle>
    <ResumeBasics Basics="ResumeData.Basics" />
    <article>
        <details open>
            <ResumeListDetailsSummary Icon="school" Title="@_website.index_education" />
            <div>
                @foreach (var education in ResumeData.Education)
                {
                    <ResumeEducation Education="education" />
                }
            </div>
        </details>
    </article>
    @if (ResumeData.Certificates != null)
    {
        <article>
            <details open>
                <ResumeListDetailsSummary Icon="card_membership" Title="@_website.index_certificates"/>
                <div>
                    @foreach (var certificate in ResumeData.Certificates)
                    {
                        <ResumeCertification Certification="certificate" />
                    }
                </div>
            </details>
        </article>
    }
    else
    {
        <!-- Certifications are not available -->
    }
    <article>
        <details open>
            <ResumeListDetailsSummary Icon="language" Title="@_website.index_languages" />
            <div>
                @foreach (var language in ResumeData.Languages)
                {
                    <ResumeLanguage Language="language" />
                }
            </div>
        </details>
    </article>
    @if (ResumeData.Skills != null)
    {
        <article>
            <details open>
                <ResumeListDetailsSummary Icon="book" Title="@_website.index_skills" />
                <div>
                    <ResumeSkills Skills="@ResumeData.Skills" />
                </div>
            </details>
        </article>
    }
    else
    {
        <!-- Skills are not available -->
    }
    @if (ResumeData.Experience != null)
    {
        <article>
            <details open>
                <ResumeListDetailsSummary Icon="stars" Title="@_website.index_experience" />
                <div>
                    <ResumeExperience Experience="@ResumeData.Experience" />
                </div>
            </details>
        </article>
    }
    else
    {
        <!-- Experience is not available -->
    }
    @if (ResumeData.Hobbies != null)
    {
        <article>
            <details open>
                <ResumeListDetailsSummary Icon="interests" Title="@_website.index_hobbies" />
                <div>
                    <ResumeHobbies Hobbies="@ResumeData.Hobbies" HobbiesIcons="@ResumeData.HobbiesIcons"/>
                </div>
            </details>
        </article>
    }
}
@code {
    public ResumeModel? ResumeData { get; set; }
    I18nText.Website _website = new();


    protected override async Task OnInitializedAsync()
    {
        var lang = await I18nText.GetCurrentLanguageAsync();
        _website = await I18nText.GetTextTableAsync<I18nText.Website>(this);
        ResumeData = await Http.GetFromJsonAsync<ResumeModel>($"data/resume.{lang.Split('-')[0]}.json");
        Logger.LogInformation($"Resume data is loaded with {lang.Split('-')[0]} language.");

        I18nText.ChangeLanguage += async (s, a) =>
        {
            ResumeData = await Http.GetFromJsonAsync<ResumeModel>($"data/resume.{a.LanguageCode.Split('-')[0]}.json");
            Logger.LogInformation($"Resume data is reloaded with {a.LanguageCode.Split('-')[0]} language.");
            await InvokeAsync(StateHasChanged);
        };
    }
}