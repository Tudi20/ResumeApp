@using System.Diagnostics
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@if (Language != null)
{
    <div class="row">
        <h5><i class="em @Language.Emoji"></i></h5>
        <div class="max">
            <h6>@Language.Name <a class="chip border @LevelColorClassCss">@Language.Level</a></h6>
        </div>
    </div>
}
else
{
    <!-- Language is not available -->
}
@code {
    I18nText.Website _website = new();
    
    public string LevelColorClassCss = "grey-border";
    
    [Parameter]
    public ResumeLanguageModel? Language { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _website = await I18nText.GetTextTableAsync<I18nText.Website>(this);
    }
    
    protected override void OnParametersSet()
    {
        if (Language == null) return;
        if (Language.Level == _website.resumeLanguage_native) { LevelColorClassCss = "light-green-border"; return;}
        if (Language.Level == _website.resumeLanguage_fluent) { LevelColorClassCss = "light-green-border"; return; }
        if (Language.Level == _website.resumeLanguage_professional) { LevelColorClassCss = "yellow-border"; return; }
        if (Language.Level == _website.resumeLanguage_conversational) { LevelColorClassCss = "orange-border"; return; }
        if (Language.Level == _website.resumeLanguage_limited) { LevelColorClassCss = "amber-border"; return; }
        if (Language.Level == _website.resumeLanguage_elementary) { LevelColorClassCss = "pink-border"; return; }
        LevelColorClassCss = "grey-border";
    }
}
