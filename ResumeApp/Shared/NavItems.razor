@using ResumeApp.Services
@using System.Diagnostics
@using System.Globalization
@inject HttpClient Http
@inject BrowserModeService BrowserModeService
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<NavLink href="" Match="NavLinkMatch.All">
    <i>home</i> <span>@_website.navItems_home</span>
</NavLink>
<div class="max"></div>
<button class="circle transparent" @onclick="BrowserModeService.ToggleDarkModeAsync">
    <i>light_mode</i> <span>@_website.navItems_toggleTheme</span>
</button>
<button class="circle transparent" data-ui="#language-dropdown">
    <i>language</i> <span>@_website.navItems_changeLanguage</span>
    <div class="dropdown no-wrap" id="language-dropdown">
        @if (_supportedLanguages != null)
        {
            @foreach (var language in _supportedLanguages)
            {
                <a @onclick="(_ => ChangeCurrentLanguage(language.Key))">
                    @if (_currentLang != language.Key)
                    {
                        @language.Value
                    }
                    else
                    {
                        <strong>@language.Value</strong>
                    }
                </a>
            }
        }
    </div>
</button>

@code
{
    I18nText.Website _website = new();
    private string? _currentLang;
    private Dictionary<string,string>? _supportedLanguages;

    protected override async Task OnInitializedAsync()
    {
        _supportedLanguages = await Http.GetFromJsonAsync<Dictionary<string,string>>("data/supportedLanguages.json");
        var lang = await I18nText.GetCurrentLanguageAsync();
        _website = await I18nText.GetTextTableAsync<I18nText.Website>(this);

        Debug.Assert(_supportedLanguages != null, nameof(_supportedLanguages) + " != null");
        _currentLang = _supportedLanguages.Keys.Contains(lang.Split('-')[0]) ? lang : "en-GB";
        
        I18nText.ChangeLanguage += (s, a) =>
        {
            Console.WriteLine($"Language changed: {a.LanguageCode}");
        };
    }

    private async Task ChangeCurrentLanguage(string newLanguage)
    {
        Console.WriteLine($"OnChangeCurrentLanguage: {newLanguage}");
        _currentLang = newLanguage;
        await I18nText.SetCurrentLanguageAsync(_currentLang);
        await BrowserModeService.CallUiAsync("#language-dropdown");
    }
}
