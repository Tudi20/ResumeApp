@using ResumeApp.Services
@using System.Diagnostics
@using System.Globalization
@inject HttpClient Http
@inject BrowserModeService BrowserModeService
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject ILogger<NavItems> Logger

<NavLink href="" Match="NavLinkMatch.All">
    @if (_website.navItems_home != null)
    {
        <i>home</i>
        <span>@_website.navItems_home</span>
    }
    else
    {
        <i>home</i>
        <a class="loader small"></a>
    }
</NavLink>
<div class="max"></div>
@if (IsDarkModeEnabled != null)
{
    @if (_website.navItems_toggleTheme != null)
    {
        <label class="switch">
            <input type="checkbox" checked="@IsDarkModeEnabled" @onchange="ToggleDarkModeAsync"
                   aria-label="@_website.navItems_toggleTheme">
            <span><i>dark_mode</i></span>
        </label>
    }
    else
    {
        <label class="switch">
            <input type="checkbox" checked="@IsDarkModeEnabled" @onchange="ToggleDarkModeAsync"
           aria-label="Toggle dark mode (Localisation is still loading)">
            <span><i>dark_mode</i></span>
        </label>
    }
}
<button class="circle transparent" data-ui="#@(Prefix)language-dropdown">
    @if (_website.navItems_changeLanguage != null)
    {
        <i>language</i>
        <span>@_website.navItems_changeLanguage</span>
    }
    else
    {
        <i>language</i>
        <span>Loading...</span>
    }
    <div class="dropdown no-wrap" id="@(Prefix)language-dropdown">
        @if (_supportedLanguages != null && _currentLang != null)
        {
            @foreach (var language in _supportedLanguages)
            {
                <a @onclick="(_ => ChangeCurrentLanguage(language.Key))">
                    @if (_currentLang != language.Key)
                    {
                        <i class="em @language.Value.Split(' ')[0]"></i>
                        @language.Value.Split(' ')[1]
                    }
                    else
                    {
                        <i class="em @language.Value.Split(' ')[0]"></i>
                        <strong>@language.Value.Split(' ')[1]</strong>
                    }
                </a>
            }
        }
    </div>
</button>

@code
{
    I18nText.Website _website = new();
    private string? _currentLang;
    private Dictionary<string,string>? _supportedLanguages;
    private bool? IsDarkModeEnabled { get; set; } = null;
    
    [Parameter]
    public required string Prefix { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsDarkModeEnabled = await BrowserModeService.GetDarkModePreferenceAsync();
        if (IsDarkModeEnabled == null)
        {
            Logger.LogWarning("Dark mode preference is not available. Setting to false.");
            IsDarkModeEnabled = false;
        }
        
        _supportedLanguages = await Http.GetFromJsonAsync<Dictionary<string,string>>("data/supportedLanguages.json");
        Debug.Assert(_supportedLanguages != null, nameof(_supportedLanguages) + " != null");
        
        _website = await I18nText.GetTextTableAsync<I18nText.Website>(this);
        
        var lang = await I18nText.GetCurrentLanguageAsync();

        Logger.LogDebug($"User's desired language is {lang}.");
        
        if (_supportedLanguages.ContainsKey(lang))
        {
            _currentLang = lang;
        }
        else
        {
            /*
             * If the exact language is not supported, use the first part of the language code if there's a variant
             * that's supported. For example, if the language is "en-US", search for "en", and use "en-GB".
             * If there's no supported variant, use "en-GB" as a fallback.
             */
        
            Logger.LogWarning($"Language {lang} is not supported. Searching for a supported variant.");
            _currentLang = _supportedLanguages.Keys.Select(x => x.Split('-')[0]).
                Contains(lang.Split('-')[0]) 
                ? _supportedLanguages.Keys.First(l => l.Split('-')[0] == lang.Split('-')[0])
                : "en-GB";
        }
        
        Logger.LogInformation("Current Language: " + _currentLang);
        
        I18nText.ChangeLanguage += (s, a) =>
        {
            Logger.LogInformation($"Language changed to {a.LanguageCode}.");
        };
    }

    private async Task ChangeCurrentLanguage(string newLanguage)
    {
        _currentLang = newLanguage;
        await I18nText.SetCurrentLanguageAsync(_currentLang);
        await BrowserModeService.CallUiAsync("#language-dropdown");
    }
    
    private async Task ToggleDarkModeAsync()
    {
        await BrowserModeService.ToggleDarkModeAsync();
    }
}
